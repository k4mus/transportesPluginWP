
<@pp.dropOutputFile/>

<#list doc.data.procedures.procedure as proc>

	<@pp.changeOutputFile name="/ASP/"+proc.@name+".asp"/>
	<%@ Language="VBScript" CodePage="1252" LCID="1033" %>
		<Script Language="VBScript" RunAt="Server">

'++
' File: ${proc.@name}.asp  
' 
'
' Copyright (c) Bolsa de Comercio de Santiago (Chile). All rights reserved.
'
' All rights to this file are owned by Bolsa de Comercio de Santiago and may
' only  be used under the terms of its associated license. You may NOT copy,
' modify, sublincese, or distribute this  file  or  portions  of  it  unless
' previously  authorized in writing by Bolsa de Comercio de Santiago. In any
' event, this notice  and  the  above  copyright  must  always  be  included
' verbatim with this file.
'

' DO NOT EDIT THIS FILE.
'--

'Returns the value of a required request parameter
Private Function ParamValue(ParamName, DefaultValue)
    ParamValue = Request.Form(ParamName)
    If (Not IsEmpty(ParamValue)) Then Exit Function
    ParamValue = Request.QueryString(ParamName)
    If (Not IsEmpty(ParamValue)) Then Exit Function
    ParamValue = DefaultValue
    If (Not IsEmpty(ParamValue)) Then Exit Function
    Err.Raise &H80040E10, "ParamValue", "Missing parameter: " & ParamName
End Function      

'Send all ResultSets back to the client in ADTG or XML
Private Sub SendResultSets(UseADTG, AdoRst, Format)
    Do Until (AdoRst Is Nothing)
        If (AdoRst.State = adStateClosed) Then Exit Do
        If (UseADTG) Then Response.Write "EcuRst"
        AdoRst.Save Response, Format
        Set AdoRst = AdoRst.NextRecordset
    Loop
End Sub

' Executes procedure "${proc.@name}"
Private Sub ExecuteProcedure(UseADTG)
    'Set the Locale to the first one accepted by the client
    UseLocale = Request.ServerVariables("HTTP_ACCEPT_LANGUAGE")
    Pos = InStr(UseLocale, ",")
    If (Pos > 0) Then UseLocale = Left(UseLocale, Pos - 1)
    If (Len(UseLocale) > 0) Then SetLocale UseLocale

    'Obtain optional ADO command Timeout (default 30 secs)
    CmdTimeout = Application("EcuCmdTimeout")
    If (IsEmpty(CmdTimeout)) Then CmdTimeout = 30
    CmdTimeout = ParamValue("EcuCmdTimeout", CmdTimeout)
    If (Not IsNumeric(CmdTimeout)) Then CmdTimeout = 30
    If (CmdTimeout < 0) Then CmdTimeout = 30

    'Connect using supplied ConnString
    Set AdoCon = Server.CreateObject("ADODB.Connection")
    AdoCon.CursorLocation = adUseClient
    AdoCon.Open Application("EcuConnString")

    'Create and initialize ADO command
    Set AdoCmd = Server.CreateObject("ADODB.Command")
    Set AdoCmd.ActiveConnection = AdoCon
    AdoCmd.CommandText = "{? = call ${proc.@name}(<#list proc.parametros.parametro as par>?<#if par_has_next>,</#if>
					</#list>)}"
    AdoCmd.CommandType = adCmdText
    AdoCmd.CommandTimeout = CmdTimeout

    '0: Append ADO parameter "RETURN_VALUE" int (Return)
    Set AdoPar = AdoCmd.CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
    AdoCmd.Parameters.Append AdoPar
					<#assign icont = 1/>  
					<#list proc.params.param  as par>
  '${icont}: Append ADO parameter "${par.@name}" ${par.@sqlType} <#if par.@largo?has_content> ( ${par.@largo} )</#if> (Input)
      Set AdoPar = AdoCmd.CreateParameter("${par.@name}", ad${par.@sqlType}, adParamInput <#if par.@largo?has_content>,${par.@largo}</#if>)
    AdoPar.Value = CStr(ParamValue("${par.@name}", Empty))
    AdoCmd.Parameters.Append AdoPar
						<#assign icont = icont+1/>
					</#list>      


    'Execute the procedure
    Set AdoRst = AdoCmd.Execute()

    'Return execution data in ADTG or XML format
    If (UseADTG) Then
        'Send ResultSets in ADTG Format
        SendResultSets UseADTG, AdoRst, adPersistADTG

        'Send output parameter "RETURN_VALUE"
        ParVal = AdoCmd.Parameters(0).Value
        Response.Write "EcuOut" & vbTab & "RETURN_VALUE" & vbTab & VarType(ParVal) & vbTab & ParVal & vbCrLf
    Else
        'Initialize XML response structure
        Response.Write "<?xml version='1.0' encoding='UTF-8'?>"
        Response.Write "<ecu:response xmlns:ecu='urn:ecu-software:response'>"

        'Send ResultSets in XML Format
        SendResultSets UseADTG, AdoRst, adPersistXML

        'Send output parameter "RETURN_VALUE"
        ParVal = AdoCmd.Parameters(0).Value
        If IsNull(ParVal) Then ParTxt = "" Else ParTxt = Replace(ParVal, "'", "&apos;")
        Response.Write "<ecu:output name='RETURN_VALUE' vartype='" & VarType(ParVal) & "' value='" & ParTxt & "'/>"

        'Terminate XML response structure
        Response.Write "</ecu:response>"
    End If

    'Release connection
    AdoCon.Close
End Sub


'Initialize response
Response.Buffer = True
Response.Expires = -1
Response.CacheControl = "no-cache"
Response.AddHeader "Pragma", "no-cache"

'Initialize response Content-Type to either XML or ADTG
If (UCase(ParamValue("EcuFormat", "ADTG")) = "XML") Then
    UseADTG = False
    Response.ContentType = "text/xml;charset=UTF-8"
Else
    UseADTG = True
    Response.ContentType = "application/x-adtg"
End If

'Execute the procedure
On Error Resume Next
ExecuteProcedure UseADTG

'Check for runtime errors
If (Err.Number <> 0) Then
    Response.Clear
    If (UseADTG) Then
        Response.Write "EcuErr" & vbTab & Err.Number & vbTab & Err.Source & vbTab & Err.Description
    Else
        Response.Write "<?xml version='1.0' encoding='UTF-8'?>"
        Response.Write "<ecu:response xmlns:ecu='urn:ecu-software:response'>"
        Response.Write "<ecu:error number='" & Err.Number & "' source='" & Err.Source
        Response.Write "' text='" & Replace(Err.Description, "'", "&apos;") & "'/>"
        Response.Write "</ecu:response>"
    End If
End If

					</Script>      

				</#list>